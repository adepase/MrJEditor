package MrJEditor.structure;

/*Generated by MPS */

import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.LinkedList;

public enum BotImgTypes {
  _NO_BotImg_("<NO BotImg>", null),
  normal("normal", "jvs"),
  smile("smile", "smile"),
  contraried("contraried", "contraried"),
  exiting("exiting", "exiting"),
  grin("grin", "grin"),
  oh("oh", "oh"),
  sad("sad", "sad"),
  surprised("surprised", "surprised"),
  understood("understood", "understood"),
  worried("worried", "worried"),
  five("five", "five"),
  microstates("microstates", "microstates"),
  rss_link("rss_link", "rss_link"),
  rss_upd("rss_upd", "rss_upd"),
  rss_ins("rss_ins", "rss_ins"),
  red_border("red_border", "red_border"),
  link("link", "link");

  private final String myName;
  public String getName() {
    return myName;
  }
  private final String myValue;
  private BotImgTypes(String name, String value) {
    myName = name;
    myValue = value;
  }
  public String getValue() {
    return myValue;
  }
  public String getValueAsString() {
    return myValue;
  }
  public static List<BotImgTypes> getConstants() {
    List<BotImgTypes> list = ListSequence.fromList(new LinkedList<BotImgTypes>());
    ListSequence.fromList(list).addElement(BotImgTypes._NO_BotImg_);
    ListSequence.fromList(list).addElement(BotImgTypes.normal);
    ListSequence.fromList(list).addElement(BotImgTypes.smile);
    ListSequence.fromList(list).addElement(BotImgTypes.contraried);
    ListSequence.fromList(list).addElement(BotImgTypes.exiting);
    ListSequence.fromList(list).addElement(BotImgTypes.grin);
    ListSequence.fromList(list).addElement(BotImgTypes.oh);
    ListSequence.fromList(list).addElement(BotImgTypes.sad);
    ListSequence.fromList(list).addElement(BotImgTypes.surprised);
    ListSequence.fromList(list).addElement(BotImgTypes.understood);
    ListSequence.fromList(list).addElement(BotImgTypes.worried);
    ListSequence.fromList(list).addElement(BotImgTypes.five);
    ListSequence.fromList(list).addElement(BotImgTypes.microstates);
    ListSequence.fromList(list).addElement(BotImgTypes.rss_link);
    ListSequence.fromList(list).addElement(BotImgTypes.rss_upd);
    ListSequence.fromList(list).addElement(BotImgTypes.rss_ins);
    ListSequence.fromList(list).addElement(BotImgTypes.red_border);
    ListSequence.fromList(list).addElement(BotImgTypes.link);
    return list;
  }
  public static BotImgTypes getDefault() {
    return BotImgTypes._NO_BotImg_;
  }
  public static BotImgTypes parseValue(String value) {
    if (value == null) {
      return BotImgTypes.getDefault();
    }
    if (value.equals(BotImgTypes._NO_BotImg_.getValueAsString())) {
      return BotImgTypes._NO_BotImg_;
    }
    if (value.equals(BotImgTypes.normal.getValueAsString())) {
      return BotImgTypes.normal;
    }
    if (value.equals(BotImgTypes.smile.getValueAsString())) {
      return BotImgTypes.smile;
    }
    if (value.equals(BotImgTypes.contraried.getValueAsString())) {
      return BotImgTypes.contraried;
    }
    if (value.equals(BotImgTypes.exiting.getValueAsString())) {
      return BotImgTypes.exiting;
    }
    if (value.equals(BotImgTypes.grin.getValueAsString())) {
      return BotImgTypes.grin;
    }
    if (value.equals(BotImgTypes.oh.getValueAsString())) {
      return BotImgTypes.oh;
    }
    if (value.equals(BotImgTypes.sad.getValueAsString())) {
      return BotImgTypes.sad;
    }
    if (value.equals(BotImgTypes.surprised.getValueAsString())) {
      return BotImgTypes.surprised;
    }
    if (value.equals(BotImgTypes.understood.getValueAsString())) {
      return BotImgTypes.understood;
    }
    if (value.equals(BotImgTypes.worried.getValueAsString())) {
      return BotImgTypes.worried;
    }
    if (value.equals(BotImgTypes.five.getValueAsString())) {
      return BotImgTypes.five;
    }
    if (value.equals(BotImgTypes.microstates.getValueAsString())) {
      return BotImgTypes.microstates;
    }
    if (value.equals(BotImgTypes.rss_link.getValueAsString())) {
      return BotImgTypes.rss_link;
    }
    if (value.equals(BotImgTypes.rss_upd.getValueAsString())) {
      return BotImgTypes.rss_upd;
    }
    if (value.equals(BotImgTypes.rss_ins.getValueAsString())) {
      return BotImgTypes.rss_ins;
    }
    if (value.equals(BotImgTypes.red_border.getValueAsString())) {
      return BotImgTypes.red_border;
    }
    if (value.equals(BotImgTypes.link.getValueAsString())) {
      return BotImgTypes.link;
    }
    return BotImgTypes.getDefault();
  }
}
