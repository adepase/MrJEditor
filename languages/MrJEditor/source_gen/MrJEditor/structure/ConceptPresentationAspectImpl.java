package MrJEditor.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private final ConceptPresentation props_Comment = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Element = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_EntityAssignment = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_EntityDeclaration = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_EntityReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_EntitySetVar = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_EntitySubstitution = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_EntityWithOpt = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ITextElement = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Operation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_OperationList = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_OperationRef = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Rule = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_RuleTest = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Script = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ScriptList = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ScriptName = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TestDeep = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TestMatch = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TestWiki = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Text = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TextElement = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TrainDocCat = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TrainDocCatLine = new ConceptPresentationBuilder().create();

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.Comment:
        return props_Comment;
      case LanguageConceptSwitch.Element:
        return props_Element;
      case LanguageConceptSwitch.EntityAssignment:
        return props_EntityAssignment;
      case LanguageConceptSwitch.EntityDeclaration:
        return props_EntityDeclaration;
      case LanguageConceptSwitch.EntityReference:
        return props_EntityReference;
      case LanguageConceptSwitch.EntitySetVar:
        return props_EntitySetVar;
      case LanguageConceptSwitch.EntitySubstitution:
        return props_EntitySubstitution;
      case LanguageConceptSwitch.EntityWithOpt:
        return props_EntityWithOpt;
      case LanguageConceptSwitch.ITextElement:
        return props_ITextElement;
      case LanguageConceptSwitch.Operation:
        return props_Operation;
      case LanguageConceptSwitch.OperationList:
        return props_OperationList;
      case LanguageConceptSwitch.OperationRef:
        return props_OperationRef;
      case LanguageConceptSwitch.Rule:
        return props_Rule;
      case LanguageConceptSwitch.RuleTest:
        return props_RuleTest;
      case LanguageConceptSwitch.Script:
        return props_Script;
      case LanguageConceptSwitch.ScriptList:
        return props_ScriptList;
      case LanguageConceptSwitch.ScriptName:
        return props_ScriptName;
      case LanguageConceptSwitch.TestDeep:
        return props_TestDeep;
      case LanguageConceptSwitch.TestMatch:
        return props_TestMatch;
      case LanguageConceptSwitch.TestWiki:
        return props_TestWiki;
      case LanguageConceptSwitch.Text:
        return props_Text;
      case LanguageConceptSwitch.TextElement:
        return props_TextElement;
      case LanguageConceptSwitch.TrainDocCat:
        return props_TrainDocCat;
      case LanguageConceptSwitch.TrainDocCatLine:
        return props_TrainDocCatLine;
    }
    return null;
  }
}
