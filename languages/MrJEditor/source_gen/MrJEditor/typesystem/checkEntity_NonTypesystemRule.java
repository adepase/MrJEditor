package MrJEditor.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractNonTypesystemRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.NonTypesystemRule_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.errors.messageTargets.MessageTarget;
import jetbrains.mps.errors.messageTargets.NodeMessageTarget;
import jetbrains.mps.errors.IErrorReporter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public class checkEntity_NonTypesystemRule extends AbstractNonTypesystemRule_Runtime implements NonTypesystemRule_Runtime {
  public checkEntity_NonTypesystemRule() {
  }
  public void applyRule(final SNode entityWithOpt, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    if ((SLinkOperations.getTarget(entityWithOpt, MetaAdapterFactory.getReferenceLink(0xe74e27ff1ed748b3L, 0x90700f0eab442068L, 0x48081dcc6022dc52L, 0x48081dcc602861e2L, "name")) == null)) {
      {
        MessageTarget errorTarget = new NodeMessageTarget();
        IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(entityWithOpt, "Entity name not correctly set. Current Value: " + (((SLinkOperations.getTarget(entityWithOpt, MetaAdapterFactory.getReferenceLink(0xe74e27ff1ed748b3L, 0x90700f0eab442068L, 0x48081dcc6022dc52L, 0x48081dcc602861e2L, "name")) == null) ? SPropertyOperations.getString(entityWithOpt, MetaAdapterFactory.getProperty(0xe74e27ff1ed748b3L, 0x90700f0eab442068L, 0x48081dcc6022dc52L, 0x4c10d49decdbe4L, "possibleName")) : SPropertyOperations.getString(SLinkOperations.getTarget(entityWithOpt, MetaAdapterFactory.getReferenceLink(0xe74e27ff1ed748b3L, 0x90700f0eab442068L, 0x48081dcc6022dc52L, 0x48081dcc602861e2L, "name")), MetaAdapterFactory.getProperty(0xe74e27ff1ed748b3L, 0x90700f0eab442068L, 0x155a47bdff5cd041L, 0x4c10d49d68595eL, "name")))), "r:ca701371-3190-4c81-bdec-d2c6278e8721(MrJEditor.typesystem)", "21410603610046410", null, errorTarget);
      }
    }

  }
  public SAbstractConcept getApplicableConcept() {
    return MetaAdapterFactory.getConcept(0xe74e27ff1ed748b3L, 0x90700f0eab442068L, 0x48081dcc6022dc52L, "MrJEditor.structure.EntityWithOpt");
  }
  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    return new IsApplicableStatus(argument.getConcept().isSubConceptOf(getApplicableConcept()), null);
  }
  public boolean overrides() {
    return false;
  }
}
