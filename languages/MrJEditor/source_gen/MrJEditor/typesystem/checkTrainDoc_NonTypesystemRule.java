package MrJEditor.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractNonTypesystemRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.NonTypesystemRule_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.errors.messageTargets.MessageTarget;
import jetbrains.mps.errors.messageTargets.NodeMessageTarget;
import jetbrains.mps.errors.IErrorReporter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public class checkTrainDoc_NonTypesystemRule extends AbstractNonTypesystemRule_Runtime implements NonTypesystemRule_Runtime {
  public checkTrainDoc_NonTypesystemRule() {
  }
  public void applyRule(final SNode trainDocCatLine, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    if (SLinkOperations.getChildren(trainDocCatLine, MetaAdapterFactory.getContainmentLink(0xe74e27ff1ed748b3L, 0x90700f0eab442068L, 0x53c537e75d21bb6bL, 0x53c537e75d220bd1L, "examples")).size() < 5) {
      {
        MessageTarget errorTarget = new NodeMessageTarget();
        IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(trainDocCatLine, "Less than 5 examples can't train the deep learning module", "r:ca701371-3190-4c81-bdec-d2c6278e8721(MrJEditor.typesystem)", "6036292342411832615", null, errorTarget);
      }
    }
    if (isEmptyString(SPropertyOperations.getString(trainDocCatLine, MetaAdapterFactory.getProperty(0xe74e27ff1ed748b3L, 0x90700f0eab442068L, 0x53c537e75d21bb6bL, 0x53c537e75d21bb6eL, "label")))) {
      {
        MessageTarget errorTarget = new NodeMessageTarget();
        IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(trainDocCatLine, "No label set", "r:ca701371-3190-4c81-bdec-d2c6278e8721(MrJEditor.typesystem)", "6036292342411841778", null, errorTarget);
      }
    }
    for (SNode e : ListSequence.fromList(SLinkOperations.getChildren(trainDocCatLine, MetaAdapterFactory.getContainmentLink(0xe74e27ff1ed748b3L, 0x90700f0eab442068L, 0x53c537e75d21bb6bL, 0x53c537e75d220bd1L, "examples")))) {
      if (isEmptyString(SPropertyOperations.getString(e, MetaAdapterFactory.getProperty(0xe74e27ff1ed748b3L, 0x90700f0eab442068L, 0x155a47bdff5e82feL, 0x155a47bdff5e82ffL, "txt")))) {
        {
          MessageTarget errorTarget = new NodeMessageTarget();
          IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(e, "Empty example", "r:ca701371-3190-4c81-bdec-d2c6278e8721(MrJEditor.typesystem)", "6036292342412379677", null, errorTarget);
        }
      }
    }
  }
  public SAbstractConcept getApplicableConcept() {
    return MetaAdapterFactory.getConcept(0xe74e27ff1ed748b3L, 0x90700f0eab442068L, 0x53c537e75d21bb6bL, "MrJEditor.structure.TrainDocCatLine");
  }
  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    return new IsApplicableStatus(argument.getConcept().isSubConceptOf(getApplicableConcept()), null);
  }
  public boolean overrides() {
    return false;
  }
  private static boolean isEmptyString(String str) {
    return str == null || str.length() == 0;
  }
}
