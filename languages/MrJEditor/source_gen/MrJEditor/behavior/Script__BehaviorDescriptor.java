package MrJEditor.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBHDescriptor;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.core.aspects.behaviour.api.BehaviorRegistry;
import jetbrains.mps.smodel.language.ConceptRegistry;
import jetbrains.mps.core.aspects.behaviour.api.SMethod;
import jetbrains.mps.core.aspects.behaviour.SMethodBuilder;
import jetbrains.mps.core.aspects.behaviour.SJavaCompoundTypeImpl;
import jetbrains.mps.core.aspects.behaviour.SModifiersImpl;
import jetbrains.mps.core.aspects.behaviour.AccessPrivileges;
import java.io.File;
import org.jetbrains.mps.openapi.model.SNode;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.baseLanguage.logging.runtime.model.LoggingRuntime;
import org.apache.log4j.Level;
import jetbrains.mps.core.aspects.behaviour.api.SConstructor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.core.aspects.behaviour.api.BHMethodNotFoundException;

public final class Script__BehaviorDescriptor extends BaseBHDescriptor {
  private static final Logger LOG = LogManager.getLogger(Script__BehaviorDescriptor.class);
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getConcept(0xe74e27ff1ed748b3L, 0x90700f0eab442068L, 0x155a47bdff5cd07bL, "MrJEditor.structure.Script");
  private static final BehaviorRegistry REGISTRY = ConceptRegistry.getInstance().getBehaviorRegistry();

  public static final SMethod<Void> loadFile_id1c4dittLeh = new SMethodBuilder<Void>(new SJavaCompoundTypeImpl(Void.class)).name("loadFile").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("1c4dittLeh").registry(REGISTRY).build(SMethodBuilder.createJavaParameter(File.class, ""), SMethodBuilder.createJavaParameter((Class<SNode>) ((Class) Object.class), ""));
  public static final SMethod<Boolean> isInt_id1c4ditw34W = new SMethodBuilder<Boolean>(new SJavaCompoundTypeImpl(Boolean.TYPE)).name("isInt").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("1c4ditw34W").registry(REGISTRY).build(SMethodBuilder.createJavaParameter(String.class, ""));
  public static final SMethod<ArrayList<SNode>> parseTextElements_id1c4ditAcGZ = new SMethodBuilder<ArrayList<SNode>>(new SJavaCompoundTypeImpl(ArrayList.class)).name("parseTextElements").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("1c4ditAcGZ").registry(REGISTRY).build(SMethodBuilder.createJavaParameter(String.class, ""), SMethodBuilder.createJavaParameter(HashMap.class, ""), SMethodBuilder.createJavaParameter(ArrayList.class, ""));
  public static final SMethod<SNode> doText_id1c4ditUc1t = new SMethodBuilder<SNode>(new SJavaCompoundTypeImpl((Class<SNode>) ((Class) Object.class))).name("doText").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("1c4ditUc1t").registry(REGISTRY).build(SMethodBuilder.createJavaParameter(String.class, ""));
  public static final SMethod<SNode> doEntityReference_id1c4ditUcmB = new SMethodBuilder<SNode>(new SJavaCompoundTypeImpl((Class<SNode>) ((Class) Object.class))).name("doEntityReference").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("1c4ditUcmB").registry(REGISTRY).build(SMethodBuilder.createJavaParameter(String.class, ""), SMethodBuilder.createJavaParameter(HashMap.class, ""), SMethodBuilder.createJavaParameter(ArrayList.class, ""));
  public static final SMethod<SNode> doEntitySubstitution_id1c4ditVxGE = new SMethodBuilder<SNode>(new SJavaCompoundTypeImpl((Class<SNode>) ((Class) Object.class))).name("doEntitySubstitution").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("1c4ditVxGE").registry(REGISTRY).build(SMethodBuilder.createJavaParameter(String.class, ""), SMethodBuilder.createJavaParameter(HashMap.class, ""), SMethodBuilder.createJavaParameter(ArrayList.class, ""));
  public static final SMethod<SNode> doEntitySetVar_idPPOiSTdA98 = new SMethodBuilder<SNode>(new SJavaCompoundTypeImpl((Class<SNode>) ((Class) Object.class))).name("doEntitySetVar").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("PPOiSTdA98").registry(REGISTRY).build(SMethodBuilder.createJavaParameter(String.class, ""), SMethodBuilder.createJavaParameter(HashMap.class, ""), SMethodBuilder.createJavaParameter(ArrayList.class, ""));
  public static final SMethod<SNode> doEntityAssignment_id1c4ditWK6Y = new SMethodBuilder<SNode>(new SJavaCompoundTypeImpl((Class<SNode>) ((Class) Object.class))).name("doEntityAssignment").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("1c4ditWK6Y").registry(REGISTRY).build(SMethodBuilder.createJavaParameter(String.class, ""), SMethodBuilder.createJavaParameter(String.class, ""), SMethodBuilder.createJavaParameter(String.class, ""), SMethodBuilder.createJavaParameter(String.class, ""), SMethodBuilder.createJavaParameter(String.class, ""), SMethodBuilder.createJavaParameter(HashMap.class, ""), SMethodBuilder.createJavaParameter(ArrayList.class, ""));

  private static final List<SMethod<?>> BH_METHODS = Arrays.<SMethod<?>>asList(loadFile_id1c4dittLeh, isInt_id1c4ditw34W, parseTextElements_id1c4ditAcGZ, doText_id1c4ditUc1t, doEntityReference_id1c4ditUcmB, doEntitySubstitution_id1c4ditVxGE, doEntitySetVar_idPPOiSTdA98, doEntityAssignment_id1c4ditWK6Y);

  private static void ___init___(@NotNull SNode __thisNode__) {
  }

  /*package*/ static void loadFile_id1c4dittLeh(@NotNull SNode __thisNode__, File f, SNode node) {

    final int RULE_TYPE = 0;
    final int RULE_PRECONDITION = 1;
    final int RULE_PATTERN = 2;
    final int RULE_PRE_EVAL = 3;
    final int RULE_ANSWER = 4;
    final int RULE_POST_EVAL = 5;
    final int RULE_IMAGE = 6;
    //  Deleted code 
  }
  /*package*/ static boolean isInt_id1c4ditw34W(@NotNull SNode __thisNode__, String str) {
    try {
      int d = Integer.parseInt(str);
    } catch (NumberFormatException nfe) {
      return false;
    }
    return true;
  }
  /*package*/ static ArrayList<SNode> parseTextElements_id1c4ditAcGZ(@NotNull SNode __thisNode__, String text, HashMap<String, SNode> references, ArrayList referrers) {
    ArrayList<SNode> result = new ArrayList<SNode>();

    // Deleted code 

    return result;
  }
  /*package*/ static SNode doText_id1c4ditUc1t(@NotNull SNode __thisNode__, String text) {
    SNode currentText = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xe74e27ff1ed748b3L, 0x90700f0eab442068L, 0x155a47bdff5e82feL, "MrJEditor.structure.Text"));
    if ((text == null)) {
      SPropertyOperations.set(currentText, MetaAdapterFactory.getProperty(0xe74e27ff1ed748b3L, 0x90700f0eab442068L, 0x155a47bdff5e82feL, 0x155a47bdff5e82ffL, "txt"), "");
    } else {
      SPropertyOperations.set(currentText, MetaAdapterFactory.getProperty(0xe74e27ff1ed748b3L, 0x90700f0eab442068L, 0x155a47bdff5e82feL, 0x155a47bdff5e82ffL, "txt"), text);
    }
    return currentText;
  }
  /*package*/ static SNode doEntityReference_id1c4ditUcmB(@NotNull SNode __thisNode__, String name, HashMap<String, SNode> references, ArrayList referrers) {
    SNode currentRef = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xe74e27ff1ed748b3L, 0x90700f0eab442068L, 0x155a47bdff63e96aL, "MrJEditor.structure.EntityReference"));
    if (name.endsWith("_OPT")) {
      name = name.substring(0, name.length() - 4);
      SPropertyOperations.set(currentRef, MetaAdapterFactory.getProperty(0xe74e27ff1ed748b3L, 0x90700f0eab442068L, 0x48081dcc6022dc52L, 0x48081dcc6022dc53L, "optional"), "_OPT");
    }
    if (references.containsKey(name)) {
      SLinkOperations.setTarget(currentRef, MetaAdapterFactory.getReferenceLink(0xe74e27ff1ed748b3L, 0x90700f0eab442068L, 0x48081dcc6022dc52L, 0x48081dcc602861e2L, "name"), references.get(name));
    } else {
      referrers.add(currentRef);
    }
    SPropertyOperations.set(currentRef, MetaAdapterFactory.getProperty(0xe74e27ff1ed748b3L, 0x90700f0eab442068L, 0x48081dcc6022dc52L, 0x4c10d49decdbe4L, "possibleName"), name);
    return currentRef;
  }
  /*package*/ static SNode doEntitySubstitution_id1c4ditVxGE(@NotNull SNode __thisNode__, String name, HashMap<String, SNode> references, ArrayList referrers) {
    SNode currentRef = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xe74e27ff1ed748b3L, 0x90700f0eab442068L, 0x155a47bdff62c107L, "MrJEditor.structure.EntitySubstitution"));
    if (name.endsWith("_OPT")) {
      name = name.substring(0, name.length() - 4);
      SPropertyOperations.set(currentRef, MetaAdapterFactory.getProperty(0xe74e27ff1ed748b3L, 0x90700f0eab442068L, 0x48081dcc6022dc52L, 0x48081dcc6022dc53L, "optional"), "_OPT");
    }
    if (references.containsKey(name)) {
      SLinkOperations.setTarget(currentRef, MetaAdapterFactory.getReferenceLink(0xe74e27ff1ed748b3L, 0x90700f0eab442068L, 0x48081dcc6022dc52L, 0x48081dcc602861e2L, "name"), references.get(name));
    } else {
      referrers.add(currentRef);
    }

    SPropertyOperations.set(currentRef, MetaAdapterFactory.getProperty(0xe74e27ff1ed748b3L, 0x90700f0eab442068L, 0x48081dcc6022dc52L, 0x4c10d49decdbe4L, "possibleName"), name);
    return currentRef;
  }
  /*package*/ static SNode doEntitySetVar_idPPOiSTdA98(@NotNull SNode __thisNode__, String name, HashMap<String, SNode> references, ArrayList referrers) {
    SNode currentDecl = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xe74e27ff1ed748b3L, 0x90700f0eab442068L, 0xd75d12e392f3960L, "MrJEditor.structure.EntitySetVar"));
    SPropertyOperations.set(currentDecl, MetaAdapterFactory.getProperty(0xe74e27ff1ed748b3L, 0x90700f0eab442068L, 0x155a47bdff5cd041L, 0x4c10d49d68595eL, "name"), name);

    if (!(references.containsKey(SPropertyOperations.getString(currentDecl, MetaAdapterFactory.getProperty(0xe74e27ff1ed748b3L, 0x90700f0eab442068L, 0x155a47bdff5cd041L, 0x4c10d49d68595eL, "name"))))) {
      references.put(SPropertyOperations.getString(currentDecl, MetaAdapterFactory.getProperty(0xe74e27ff1ed748b3L, 0x90700f0eab442068L, 0x155a47bdff5cd041L, 0x4c10d49d68595eL, "name")), currentDecl);
    }

    return currentDecl;
  }
  /*package*/ static SNode doEntityAssignment_id1c4ditWK6Y(@NotNull SNode __thisNode__, String name, String type, String num, String fmt, String excl, HashMap<String, SNode> references, ArrayList referrers) {
    LoggingRuntime.logMsgView(Level.DEBUG, "doAssign: " + name + "," + type + "," + num + "," + fmt + "," + excl, Script__BehaviorDescriptor.class, null, null);
    SNode currentDecl = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xe74e27ff1ed748b3L, 0x90700f0eab442068L, 0x155a47bdff63ea14L, "MrJEditor.structure.EntityAssignment"));
    SPropertyOperations.set(currentDecl, MetaAdapterFactory.getProperty(0xe74e27ff1ed748b3L, 0x90700f0eab442068L, 0x155a47bdff5cd041L, 0x4c10d49d68595eL, "name"), name);
    if (type != null) {
      SPropertyOperations.set(currentDecl, MetaAdapterFactory.getProperty(0xe74e27ff1ed748b3L, 0x90700f0eab442068L, 0x155a47bdff63ea14L, 0x4c10d49d515887L, "type"), type);
    } else {
      if (num == null) {
        type = "S";
        SPropertyOperations.set(currentDecl, MetaAdapterFactory.getProperty(0xe74e27ff1ed748b3L, 0x90700f0eab442068L, 0x155a47bdff63ea14L, 0x4c10d49d515887L, "type"), "S");
      } else {
        type = "N";
        SPropertyOperations.set(currentDecl, MetaAdapterFactory.getProperty(0xe74e27ff1ed748b3L, 0x90700f0eab442068L, 0x155a47bdff63ea14L, 0x4c10d49d515887L, "type"), "N");
      }
    }
    if (num != null) {
      SPropertyOperations.set(currentDecl, MetaAdapterFactory.getProperty(0xe74e27ff1ed748b3L, 0x90700f0eab442068L, 0x155a47bdff63ea14L, 0x4c10d49d515889L, "numWord"), "" + (Integer.parseInt(num)));
    } else {
      SPropertyOperations.set(currentDecl, MetaAdapterFactory.getProperty(0xe74e27ff1ed748b3L, 0x90700f0eab442068L, 0x155a47bdff63ea14L, 0x4c10d49d515889L, "numWord"), "" + (0));
    }
    LoggingRuntime.logMsgView(Level.DEBUG, "fmt = " + fmt + "excl = " + excl, Script__BehaviorDescriptor.class, null, null);

    if (excl == null && !(type.equals("S")) && !(type.equals("N"))) {
      excl = fmt;
      fmt = null;
    }
    LoggingRuntime.logMsgView(Level.DEBUG, "fmt = " + fmt + "excl = " + excl, Script__BehaviorDescriptor.class, null, null);
    if (fmt != null && !(type.equals("N"))) {
      SLinkOperations.getChildren(currentDecl, MetaAdapterFactory.getContainmentLink(0xe74e27ff1ed748b3L, 0x90700f0eab442068L, 0x155a47bdff63ea14L, 0x4c10d49d51584fL, "format")).addAll(Script__BehaviorDescriptor.parseTextElements_id1c4ditAcGZ.invoke(__thisNode__, fmt, references, referrers));
    }
    if (excl != null && !(type.equals("S")) && !(type.equals("N"))) {
      SLinkOperations.getChildren(currentDecl, MetaAdapterFactory.getContainmentLink(0xe74e27ff1ed748b3L, 0x90700f0eab442068L, 0x155a47bdff63ea14L, 0x4c10d49d515851L, "exclude")).addAll(Script__BehaviorDescriptor.parseTextElements_id1c4ditAcGZ.invoke(__thisNode__, excl, references, referrers));
    }
    if (!(references.containsKey(SPropertyOperations.getString(currentDecl, MetaAdapterFactory.getProperty(0xe74e27ff1ed748b3L, 0x90700f0eab442068L, 0x155a47bdff5cd041L, 0x4c10d49d68595eL, "name"))))) {
      references.put(SPropertyOperations.getString(currentDecl, MetaAdapterFactory.getProperty(0xe74e27ff1ed748b3L, 0x90700f0eab442068L, 0x155a47bdff5cd041L, 0x4c10d49d68595eL, "name")), currentDecl);
    }

    return currentDecl;
  }

  /*package*/ Script__BehaviorDescriptor() {
    super(REGISTRY);
  }

  @Override
  protected void initNode(@NotNull SNode node, @NotNull SConstructor constructor, @Nullable Object[] parameters) {
    ___init___(node);
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SNode node, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      case 0:
        loadFile_id1c4dittLeh(node, (File) parameters[0], (SNode) parameters[1]);
        return null;
      case 1:
        return (T) ((Boolean) isInt_id1c4ditw34W(node, (String) parameters[0]));
      case 2:
        return (T) ((ArrayList<SNode>) parseTextElements_id1c4ditAcGZ(node, (String) parameters[0], (HashMap<String, SNode>) parameters[1], (ArrayList) parameters[2]));
      case 3:
        return (T) ((SNode) doText_id1c4ditUc1t(node, (String) parameters[0]));
      case 4:
        return (T) ((SNode) doEntityReference_id1c4ditUcmB(node, (String) parameters[0], (HashMap<String, SNode>) parameters[1], (ArrayList) parameters[2]));
      case 5:
        return (T) ((SNode) doEntitySubstitution_id1c4ditVxGE(node, (String) parameters[0], (HashMap<String, SNode>) parameters[1], (ArrayList) parameters[2]));
      case 6:
        return (T) ((SNode) doEntitySetVar_idPPOiSTdA98(node, (String) parameters[0], (HashMap<String, SNode>) parameters[1], (ArrayList) parameters[2]));
      case 7:
        return (T) ((SNode) doEntityAssignment_id1c4ditWK6Y(node, (String) parameters[0], (String) parameters[1], (String) parameters[2], (String) parameters[3], (String) parameters[4], (HashMap<String, SNode>) parameters[5], (ArrayList) parameters[6]));
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SAbstractConcept concept, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @NotNull
  @Override
  public List<SMethod<?>> getDeclaredMethods() {
    return BH_METHODS;
  }

  @NotNull
  @Override
  public SAbstractConcept getConcept() {
    return CONCEPT;
  }
}
